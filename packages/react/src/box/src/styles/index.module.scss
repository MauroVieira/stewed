@use "@stewed/react/src/theme/src/styles" as theme;
@use "./variables" as *;

@include theme.scope($box-root) {
  @include theme.define-var(
    (
      display: flex,
      screen: auto,
      background-color: transparent,
    )
  );

  display: theme.get-var(display);
  box-sizing: border-box;
  height: theme.get-var(screen);
  background-color: theme.get-var(background-color);

  &--inline {
    @include theme.define-var(
      (
        display: inline-flex,
      )
    );
  }

  &--block {
    @include theme.define-var(
      (
        display: block,
      )
    );
  }

  // Direction
  &--row-reverse {
    flex-direction: row-reverse;
  }

  &--column {
    flex-direction: column;
  }

  &--column-reverse {
    flex-direction: column-reverse;
  }

  // Gap
  @each $key, $value in $box-gap {
    &--gap-#{$key} {
      gap: #{$value};
    }
  }

  // Skins
  &--light {
    @include theme.define-var(
      (
        background-color: theme.get-color("light"),
      )
    );
  }

  &--dark {
    @include theme.define-var(
      (
        background-color: theme.get-color("dark"),
      )
    );
  }

  // Skins
  @each $key, $value in $box-skins {
    &--#{$key} {
      @include theme.define-var(
        (
          background-color: $value,
        )
      );
    }
  }

  // Screen (Height)
  @each $key, $value in $box-screen {
    &--screen-#{$key} {
      @include theme.define-var(
        (
          screen: #{$value},
        )
      );
    }
  }

  // Padding
  @each $key, $value in $box-padding {
    &--padding-block-#{$key} {
      padding-block: #{$value};
    }
  }

  @each $key, $value in $box-padding {
    &--padding-inline-#{$key} {
      padding-inline: #{$value};
    }
  }

  // Space
  @each $key, $value in $box-gap {
    &--space-x-#{$key} ~ :not([hidden]) {
      margin-left: #{$value};
    }

    &--space-y-#{$key}:not([hidden]) ~ :not([hidden]) {
      margin-top: #{$value};
    }
  }

  // Justify Content
  &--justify-start {
    justify-content: start;
  }

  &--justify-end {
    justify-content: end;
  }

  &--justify-center {
    justify-content: center;
  }

  &--justify-between {
    justify-content: space-between;
  }

  &--justify-around {
    justify-content: space-around;
  }

  &--justify-evenly {
    justify-content: space-evenly;
  }

  // Align Items
  &--items-start {
    align-items: start;
  }

  &--items-end {
    align-items: end;
  }

  &--items-center {
    align-items: center;
  }

  &--items-baseline {
    align-items: baseline;
  }

  &--items-stretch {
    align-items: stretch;
  }

  // box Grow
  &--grow {
    flex-basis: 0;
    flex-grow: 1;
  }

  // box Wrap
  &--wrap {
    flex-wrap: wrap;
  }

  &--wrap-reverse {
    flex-wrap: wrap-reverse;
  }

  &--nowrap {
    flex-wrap: nowrap;
  }
}
