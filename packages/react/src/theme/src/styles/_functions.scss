@use "sass:map";
@use "./variables" as *;

@function get-theme-var($name) {
  @if $prefix {
    @return var(--#{$prefix}-#{$name});
  }

  @return var(--#{$name});
}

@function get-var($name, $fallback: null) {
  $var: null;

  @if $scope-naming {
    $var: if($prefix, --#{$prefix}-#{$scope-naming}-#{$name}, --#{$scope-naming}-#{$name});
  } @else {
    /* stylelint-disable-next-line custom-property-no-missing-var-function */
    $var: if($prefix, --#{$prefix}-#{$name}, --#{$name});
  }

  @if $fallback {
    @return var($var, $fallback);
  }

  @return var($var);
}

@function get-color($value: null, $level: "default") {
  @if not $value {
    @return $colors;
  }

  @if not map.has-key($colors, $value) {
    @error "Invalid color specified! #{$value} doesn't exist. Choose one of #{map.keys($colors)}";
  }

  $levels: map.get($colors, $value);

  @if not map.has-key($levels, $level) {
    @error "Invalid level specified! #{$level} doesn't exist. Choose one of #{map.keys($levels)}";
  }

  @return map.get($levels, $level);
}

@function get-font-family($value: null) {
  @if not $value {
    @return $font-family;
  }

  @if not map.has-key($font-family, $value) {
    @error "Invalid font family specified! #{$value} doesn't exist. Choose one of #{map.keys($font-family)}";
  }

  @return map.get($font-family, $value);
}

@function get-font-size($value: null) {
  @if not $value {
    @return $font-size;
  }

  @if not map.has-key($font-size, $value) {
    @error "Invalid font size specified! #{$value} doesn't exist. Choose one of #{map.keys($font-size)}";
  }

  @return map.get($font-size, $value);
}

@function get-font-weight($value: null) {
  @if not $value {
    @return $font-weight;
  }

  @if not map.has-key($font-weight, $value) {
    @error "Invalid font weight specified! #{$value} doesn't exist. Choose one of #{map.keys($font-weight)}";
  }

  @return map.get($font-weight, $value);
}

@function get-line-height($value) {
  @if not map.has-key($line-height, $value) {
    @error "Invalid line height specified! #{$value} doesn't exist. Choose one of #{map.keys($line-height)}";
  }

  @return map.get($line-height, $value);
}

@function get-radius($value: null) {
  @if not $value {
    @return $radius;
  }

  @if not map.has-key($radius, $value) {
    @error "Invalid radius specified! #{$value} doesn't exist. Choose one of #{map.keys($radius)}";
  }

  @return map.get($radius, $value);
}

@function get-spacing($value: null) {
  @if not $value {
    @return $spacings;
  }

  @if not map.has-key($spacings, $value) {
    @error "Invalid spacing's specified! #{$value} doesn't exist. Choose one of #{map.keys($spacings)}";
  }

  @return map.get($spacings, $value);
}

@function get-viewport($value: null) {
  @if not $value {
    @return $viewport;
  }

  @if not map.has-key($viewport, $value) {
    @error "Invalid viewport's specified! #{$value} doesn't exist. Choose one of #{map.keys($viewport)}";
  }

  @return map.get($viewport, $value);
}

@function get-elevation($value: null) {
  @if not $value {
    @return $elevation;
  }

  @if not map.has-key($elevation, $value) {
    @error "Invalid elevation's specified! #{$value} doesn't exist. Choose one of #{map.keys($elevation)}";
  }

  @return map.get($elevation, $value);
}

@function get-screens($value: null) {
  @if not $value {
    @return $screens;
  }

  @if not map.has-key($screens, $value) {
    @error "Invalid screens's specified! #{$value} doesn't exist. Choose one of #{map.keys($screens)}";
  }

  @return map.get($screens, $value);
}

@function get-breakpoints($value: null) {
  @if not $value {
    @return $breakpoints;
  }

  @if not map.has-key($breakpoints, $value) {
    @error "Invalid breakpoints's specified! #{$value} doesn't exist. Choose one of #{map.keys($breakpoints)}";
  }

  @return map.get($breakpoints, $value);
}

@function get-shadow($value: null) {
  @if not $value {
    @return $shadow;
  }

  @if not map.has-key($shadow, $value) {
    @error "Invalid shadow's specified! #{$value} doesn't exist. Choose one of #{map.keys($shadow)}";
  }

  @return map.get($shadow, $value);
}

@function get-transition-duration($value: null) {
  @if not $value {
    @return $transition-duration;
  }

  @if not map.has-key($transition-duration, $value) {
    @error "Invalid transition-duration's specified! #{$value} doesn't exist. Choose one of #{map.keys($transition-duration)}";
  }

  @return map.get($transition-duration, $value);
}

@function get-transition-timing-function($value: null) {
  @if not $value {
    @return $transition-timing-function;
  }

  @if not map.has-key($transition-timing-function, $value) {
    @error "Invalid$transition-timing-function's specified! #{$value} doesn't exist. Choose one of #{map.keys($transition-timing-function)}";
  }

  @return map.get($transition-timing-function, $value);
}
