@use 'sass:map';
@use 'functions' as func;

/// Holds the default configuration for styles. Customize this to modify default values.
$config: () !default;

/// Default configuration for styles.
$default-config: (
    prefix: null,
    extend: (
        colors: (),
        screens: (),
        font-size: (),
        font-weights: (),
        radiuses: (),
        opacities: (),
    ),
    spacings: (
        xs: 2px,
        sm: 6px,
        md: 8px,
        lg: 12px,
        xl: 16px,
        2xl: 24px,
    ),
    screens: (
        sm: 768px,
        md: 1024px,
        lg: 1280px,
        xl: 1440px,
    ),
    colors: (
        primary: (
            50: #eef2ff,
            100: #e0e7ff,
            200: #c7d2fe,
            300: #a5b4fc,
            400: #818cf8,
            500: #6366f1,
            600: #4f46e5,
            700: #4338ca,
            800: #3730a3,
            900: #312e81,
        ),
        secondary: (
            50: #f8fafc,
            100: #f1f5f9,
            200: #e2e8f0,
            300: #cbd5e1,
            400: #94a3b8,
            500: #64748b,
            600: #475569,
            700: #334155,
            800: #1e293b,
            900: #0f172a,
        ),
        gray: (
            50: #fafafa,
            100: #f5f5f5,
            200: #e5e5e5,
            300: #d4d4d4,
            400: #a3a3a3,
            500: #737373,
            600: #525252,
            700: #404040,
            800: #262626,
            900: #171717,
        ),
        blue: (
            50: #eff6ff,
            100: #dbeafe,
            200: #bfdbfe,
            300: #93c5fd,
            400: #60a5fa,
            500: #3b82f6,
            600: #2563eb,
            700: #1d4ed8,
            800: #1e40af,
            900: #1e3a8a,
        ),
        green: (
            50: #f0fdf4,
            100: #dcfce7,
            200: #bbf7d0,
            300: #86efac,
            400: #4ade80,
            500: #22c55e,
            600: #16a34a,
            700: #15803d,
            800: #166534,
            900: #14532d,
        ),
        red: (
            50: #fef2f2,
            100: #fee2e2,
            200: #fecaca,
            300: #fca5a5,
            400: #f87171,
            500: #ef4444,
            600: #dc2626,
            700: #b91c1c,
            800: #991b1b,
            900: #7f1d1d,
        ),
        yellow: (
            50: #fefce8,
            100: #fef9c3,
            200: #fef08a,
            300: #fde047,
            400: #facc15,
            500: #eab308,
            600: #ca8a04,
            700: #a16207,
            800: #854d0e,
            900: #713f12,
        ),
    ),
    font-size: (
        xs: func.rem(12),
        sm: func.rem(14),
        md: func.rem(16),
        lg: func.rem(18),
        xl: func.rem(20),
        2xl: func.rem(24),
        3xl: func.rem(30),
        4xl: func.rem(36),
        5xl: func.rem(48),
        6xl: func.rem(60),
        7xl: func.rem(72),
        8xl: func.rem(96),
    ),
    line-height: (
        sm: func.rem(20),
        md: func.rem(24),
        lg: func.rem(28),
        xl: func.rem(34),
        2xl: func.rem(42),
        3xl: func.rem(50),
        4xl: func.rem(64),
    ),
    font-weight: (
        thin: 100,
        light: 300,
        normal: 400,
        medium: 500,
        semibold: 600,
        bold: 700,
    ),
    radius: (
        sm: func.rem(2),
        md: func.rem(4),
        lg: func.rem(8),
        xl: func.rem(12),
        none: 0,
        rounded: 100%,
    ),
    disabled: 0.3,
    transition: (
        duration: (
            quickly: 100ms,
            normal: 222ms,
            slowly: 333ms,
        ),
        timing-function: (
            decelerate: cubic-bezier(0, 0, 0.2, 1),
            accelerate: cubic-bezier(0.4, 0, 1, 1),
            quickly-accelerate-slowly-decelerate: cubic-bezier(0.4, 0, 0.2, 1),
            quickly-accelerate-decelerate: cubic-bezier(0.4, 0, 0.6, 1),
        ),
    ),
);

/// Merged configuration of default and user-defined styles.
$all-config: map.deep-merge($default-config, $config);

/// Prefix value for CSS variables, allowing for customization and theming.
$prefix: map.get($all-config, prefix);

/// Defines font sizes for elements like headings, paragraphs, etc.
$font-size: map.get($all-config, font-size);

/// Specifies line heights corresponding to different font sizes.
$line-height: map.get($all-config, line-height);

/// Defines font weights (thin, light, normal, medium, semibold, bold).
$font-weight: map.get($all-config, font-weight);

/// Defines spacing values for different sizes (xs, sm, md, lg, xl, 2xl).
$spacings: map.get($all-config, spacings);

/// Specifies border radius values for elements (sm, md, lg, xl, none, rounded).
$radius: map.get($all-config, radius);

/// Defines color palettes for primary, secondary, gray, blue, green, red, yellow shades.
$colors: map.get($all-config, colors);

/// Defines responsive breakpoints for screen sizes (sm, md, lg, xl).
$screens: map.get($all-config, screens);

/// Opacity value for disabled elements.
$disabled: map.get($all-config, disabled);

/// Merges default colors with additional colors from configuration.
$merged-colors: map.deep-merge($colors, map.get($all-config, extend, colors));

/// Transition settings for animations.
$transition: map.get($all-config, transition);

/// Duration values for CSS transitions (quickly, normal, slowly).
$duration: map.get($transition, duration);

/// Timing function values for CSS transitions.
$timing-function: map.get($transition, timing-function);

/// Defines CSS transitions with given property, duration, timing function, and optional delay.
/// @param {string|list} $property - The CSS property or a list of properties to be transitioned.
/// @param {string} [$duration=quickly] - Duration of the transition.
/// @param {string} [$timing-function=accelerate] - Timing function of the transition.
/// @param {string} [$delay=null] - Delay before the transition starts.
@mixin transition(
    $property,
    $duration: map.get($duration, quickly),
    $timing-function: map.get($timing-function, accelerate),
    $delay: null
) {
    @if (type-of($property) == list) {
        transition: $duration $timing-function $delay;
        transition-property: $property;
    } @else {
        transition: $property $duration $timing-function $delay;
    }
}

/// Retrieves the specific tone of a color from the `$merged-colors` map.
/// @param {string} $color - The base color name.
/// @param {number} [$tone=500] - Tone of the color.
/// @returns {string} - The CSS variable representing the specified color tone.
@function get-color($color, $tone: 500) {
    @if not map.has-key($merged-colors, $color) {
        @error "Invalid color specified! #{$color} doesn't exist. Choose one of #{map.keys($merged-colors)}";
    }

    $color-tone: map.get($merged-colors, $color);

    @if not map.has-key($color-tone, $tone) {
        @error "Invalid tone specified! #{$tone} doesn't exist. Choose one of #{map.keys($color-key)}";
    }

    @return get-var(#{$color}-#{$tone});
}

/// Defines focus styles on elements with specified color, outline offset, and width.
/// @param {string} [$color=get-color('primary')] - Color of the focus outline.
/// @param {string} [$offset=1px] - Offset of the focus outline.
/// @param {string} [$width=1px] - Width of the focus outline.
@mixin focus-styles(
    $color: #{get-color('primary')},
    $offset: 1px,
    $width: 1px
) {
    &:focus-within {
        outline-color: $color;
        outline-offset: $offset;
        outline-width: $width;
        outline-style: solid;
    }
}

/// Returns value of CSS variable. Accepts variable name, applies prefix if defined, and returns the variable value.
/// @param {string} $name - Name of the CSS variable.
/// @returns {string} - The value of the specified CSS variable.
@function get-var($name) {
    @if ($prefix) {
        @return var(--#{$prefix}-#{$name});
    }

    @return var(--#{$name});
}

/// Defines CSS variables with provided name and value.
/// @param {string} $name - Name of the CSS variable.
/// @param {string} $value - Value to be assigned to the CSS variable.
@mixin define-var($name, $value) {
    @if ($prefix) {
        --#{$prefix}-#{$name}: #{$value};
    } @else {
        --#{$name}: #{$value};
    }
}

/// Defines CSS variables for colors based on `$merged-colors` map.
@mixin define-theme() {
    @each $name, $colors in $merged-colors {
        @each $tone, $value in $colors {
            @include define-var(#{$name}-#{$tone}, $value);
        }
    }
}

/// Applies the defined theme by setting CSS variables based on the `$merged-colors` map.
/// @param {string} [$scope=null] - Scope where the theme should be applied. Default is `null` which applies to `:root`.
@mixin use-theme($scope: null) {
    @if ($scope) {
        :global(#{$scope}) {
            @include define-theme;
        }
    } @else {
        :root {
            @include define-theme;
        }
    }
}
