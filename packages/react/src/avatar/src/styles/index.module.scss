@use "@stewed/react/src/theme/src/styles" as theme;
@use "@stewed/react/src/typography/src/styles" as text;
@use "./variables" as *;

@include theme.scope($avatar-root) {
  position: relative;
  display: inline-flex;
  flex-shrink: 0;
  align-items: center;
  justify-content: center;
  width: theme.get-var(size);
  height: theme.get-var(size);
  overflow: hidden;
  user-select: none;
  background-color: theme.get-var(background-color);
  border-radius: theme.get-var(border-radius);

  @include text.typography(
    base,
    $overrides: (
      color: theme.get-var("color"),
      font-weight: theme.get-font-weight("medium"),
      font-size: calc(theme.get-var(size) / 3)
    )
  );

  &-group {
    display: flex;

    > .#{$avatar-root} {
      box-shadow: 0 0 0 1px currentcolor;

      + .#{$avatar-root} {
        margin-left: calc(theme.get-var(size) / -3);
      }
    }
  }

  &__img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: inherit;
  }

  &__loading {
    position: absolute;
    inset: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: theme.get-var(background-color);
  }

  @each $key, $value in $avatar-sizes {
    &--#{$key} {
      @include theme.define-var(
        (
          size: $value,
        )
      );
    }
  }

  @each $key, $value in $avatar-skins {
    &--#{$key} {
      @include theme.define-var(
        (
          color: theme.get-color($key, "foreground-on-background"),
          background-color: theme.get-color($key, "background"),
        )
      );
    }
  }

  &--circle {
    @include theme.define-var(
      (
        border-radius: theme.get-radius("full"),
      )
    );
  }

  &--square {
    @include theme.define-var(
      (
        border-radius: theme.get-var(radius),
      )
    );
  }
}
