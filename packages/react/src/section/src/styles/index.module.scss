@use "@stewed/react/src/theme/src/styles" as theme;
@use "./variables" as *;

@include theme.scope($section-root) {
  display: flex;
  width: theme.get-var(width);
  height: theme.get-var(height);
  background-color: theme.get-var(background-color);
  box-sizing: border-box;

  // Skins
  &--light {
    @include theme.define-var(
      (
        background-color: theme.get-color("light"),
      )
    );
  }

  &--dark {
    @include theme.define-var(
      (
        background-color: theme.get-color("dark"),
      )
    );
  }

  @each $skin in $section-skins {
    &--#{$skin} {
      @include theme.define-var(
        (
          background-color: theme.get-color($skin, "500"),
        )
      );
    }

    @each $color, $value in theme.get-color($skin) {
      &--#{$skin}-#{$color} {
        @include theme.define-var(
          (
            background-color: $value,
          )
        );
      }
    }
  }

  // Sizing
  @each $key, $value in $section-width {
    &--sizing-width-#{$key} {
      @include theme.define-var(
        (
          width: #{$value},
        )
      );
    }
  }

  @each $key, $value in $section-height {
    &--sizing-height-#{$key} {
      @include theme.define-var(
        (
          height: #{$value},
        )
      );
    }
  }

  // Padding
  @each $key, $value in $section-padding {
    &--padding-block-#{$key} {
      padding-block: #{$value};
    }
  }

  @each $key, $value in $section-padding {
    &--padding-inline-#{$key} {
      padding-inline: #{$value};
    }
  }

  // Space
  @each $key, $value in $section-space {
    &--space-x-#{$key} ~ :not([hidden]) {
      margin-left: #{$value};
    }

    &--space-y-#{$key}:not([hidden]) ~ :not([hidden]) {
      margin-top: #{$value};
    }
  }
}
