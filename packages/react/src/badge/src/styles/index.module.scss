@use "sass:map";
@use "@stewed/react/src/theme/src/styles" as theme;
@use "@stewed/react/src/typography/src/styles" as text;
@use "./variables" as *;

@include theme.scope($badge-root) {
  position: relative;
  display: inline-flex;
  font-size: theme.get-var(font-size);
  color: theme.get-var(color);

  @include theme.define-var(
    (
      padding-inline: 0,
      position: relative,
      transform: none,
      inset: 0
    )
  );

  &__value {
    position: theme.get-var(position);
    inset: theme.get-var(inset);
    z-index: 11; // To be above the focus
    box-sizing: border-box;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: theme.get-var(size);
    height: theme.get-var(size);
    padding-inline: theme.get-var(padding-inline);
    white-space: nowrap;
    background-color: theme.get-var(background-color);
    border: 1px solid theme.get-var(border-color);
    border-radius: theme.get-var(radius);
    transform: theme.get-var(transform);

    @include text.typography(
      base,
      $overrides: (color: inherit, font-size: inherit, line-height: theme.get-var(size))
    );

    &:empty {
      @include theme.define-var(
        (
          size: theme.get-spacing("sm"),
          padding-inline: 0
        )
      );
    }
  }

  // Skins
  @each $value in $badge-skins {
    &--#{$value} {
      &-filled {
        @include theme.define-var(
          (
            background-color: theme.get-color($value, "background"),
            color: theme.get-color($value, "foreground-on-background")
          )
        );
      }

      &-outline {
        @include theme.define-var(
          (
            background-color: transparent,
            border-color: currentColor,
            color: theme.get-color($value, "foreground")
          )
        );
      }
    }
  }

  // Sizes
  @each $key, $value in $badge-sizes {
    &--#{$key} {
      @include theme.define-var(
        (
          font-size: map.get($value, "font-size"),
          size: map.get($value, "size")
        )
      );
    }
  }

  // Appearance
  &--filled {
    @include theme.define-var(
      (
        color: white
      )
    );
  }

  &--outline {
    @include theme.define-var(
      (
        background-color: transparent
      )
    );
  }

  &--padded {
    @include theme.define-var(
      (
        padding-inline: theme.get-spacing("xs")
      )
    );
  }

  &--top-left,
  &--top-right,
  &--bottom-left,
  &--bottom-right {
    @include theme.define-var(
      (
        position: absolute
      )
    );
  }

  &--top-left {
    @include theme.define-var(
      (
        transform: translate(-50%, -50%)
      )
    );

    &.#{$badge-root}--rectangular {
      @include theme.define-var(
        (
          inset: 0 auto auto 0
        )
      );
    }

    &.#{$badge-root}--circular {
      @include theme.define-var(
        (
          inset: calc(theme.get-spacing("sm") * 0.5) auto auto calc(theme.get-spacing("sm") * 0.75)
        )
      );
    }
  }

  &--top-right {
    @include theme.define-var(
      (
        transform: translate(50%, -50%)
      )
    );

    &.#{$badge-root}--rectangular {
      @include theme.define-var(
        (
          inset: 0 0 auto auto
        )
      );
    }

    &.#{$badge-root}--circular {
      @include theme.define-var(
        (
          inset: calc(theme.get-spacing("sm") * 0.5) calc(theme.get-spacing("sm") * 0.75) auto auto
        )
      );
    }
  }

  &--bottom-left {
    @include theme.define-var(
      (
        transform: translate(-50%, 50%)
      )
    );

    &.#{$badge-root}--rectangular {
      @include theme.define-var(
        (
          inset: auto auto 0 0
        )
      );
    }

    &.#{$badge-root}--circular {
      @include theme.define-var(
        (
          inset: auto auto calc(theme.get-spacing("sm") * 0.5) calc(theme.get-spacing("sm") * 0.75)
        )
      );
    }
  }

  &--bottom-right {
    @include theme.define-var(
      (
        transform: translate(50%, 50%)
      )
    );

    &.#{$badge-root}--rectangular {
      @include theme.define-var(
        (
          inset: auto 0 0 auto
        )
      );
    }

    &.#{$badge-root}--circular {
      @include theme.define-var(
        (
          inset: auto calc(theme.get-spacing("sm") * 0.75) calc(theme.get-spacing("sm") * 0.5) auto
        )
      );
    }
  }
}
