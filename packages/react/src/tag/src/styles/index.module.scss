@use "@stewed/react/src/theme/src/styles" as theme;
@use "@stewed/react/src/typography/src/styles" as text;
@use "./variables" as *;

@include theme.scope($tag-root) {
  @include theme.define-var(
    (
      border-width: 1px,
      border-color: transparent,
      gap: theme.get-spacing("sm"),
    )
  );

  position: relative;
  box-sizing: border-box;
  display: inline-flex;
  gap: theme.get-var(gap);
  align-items: center;
  justify-content: center;
  height: theme.get-var(height);
  padding-inline: theme.get-var(padding-inline);
  line-height: 1;
  text-decoration: none;
  white-space: nowrap;
  background-color: theme.get-var(background-color);
  border: theme.get-var(border-width) solid theme.get-var(border-color);
  border-radius: theme.get-var(radius);

  @include text.typography(
    "base",
    $overrides: (color: theme.get-var(color), font-size: theme.get-var(font-size), line-height: 1)
  );

  &__left,
  &__right {
    display: flex;
    font-size: inherit;
  }

  &--xs {
    @include theme.define-var(
      (
        height: 18px,
        padding-inline: theme.get-spacing("xs"),
        font-size: theme.get-font-size("xxs"),
      )
    );
  }

  &--sm {
    @include theme.define-var(
      (
        height: 20px,
        padding-inline: theme.get-spacing("sm"),
        font-size: theme.get-font-size("xs"),
      )
    );
  }

  &--md {
    @include theme.define-var(
      (
        height: 22px,
        padding-inline: theme.get-spacing("md"),
        font-size: theme.get-font-size("xs"),
      )
    );
  }

  &--lg {
    @include theme.define-var(
      (
        height: 28px,
        padding-inline: theme.get-spacing("lg"),
        font-size: theme.get-font-size("sm"),
      )
    );
  }

  @each $value in $tag-skins {
    &--#{$value} {
      &-filled {
        @include theme.define-var(
          (
            background-color: theme.get-color($value, "500"),
            color: theme.get-color("white"),
          )
        );

        &[href]:hover {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "600"),
            )
          );
        }

        &[href]:active {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "500"),
            )
          );
        }
      }

      &-ghost {
        @include theme.define-var(
          (
            color: theme.get-color($value, "500"),
            background-color: transparent,
          )
        );

        &[href]:hover {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "100"),
            )
          );
        }

        &[href]:active {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "200"),
            )
          );
        }
      }

      &-outline {
        @include theme.define-var(
          (
            background-color: transparent,
            border-color: currentColor,
            color: theme.get-color($value, "500"),
          )
        );

        &[href]:hover {
          @include theme.define-var(
            (
              color: theme.get-color($value, "600"),
            )
          );
        }

        &[href]:active {
          @include theme.define-var(
            (
              color: theme.get-color($value, "500"),
            )
          );
        }
      }

      &-soft {
        @include theme.define-var(
          (
            color: theme.get-color($value, "600"),
            background-color: color-mix(in srgb, theme.get-color($value, "500"), transparent 95%),
          )
        );

        &[href]:hover {
          @include theme.define-var(
            (
              color: theme.get-color($value, "500"),
            )
          );
        }

        &[href]:active {
          @include theme.define-var(
            (
              color: theme.get-color($value, "500"),
            )
          );
        }
      }
    }
  }
}
