@use "sass:map";
@use "@stewed/react/src/theme/src/styles" as theme;
@use "@stewed/react/src/typography/src/styles" as text;
@use "./variables" as *;

@include theme.scope($tag-root) {
  @include theme.define-var(
    (
      border-radius: theme.get-radius("sm"),
      gap: theme.get-spacing("sm"),
    )
  );

  position: relative;
  display: inline-flex;
  gap: theme.get-var(gap);
  align-items: center;
  justify-content: center;
  height: theme.get-var(height);
  padding-block: theme.get-var(padding-block);
  padding-inline: theme.get-var(padding-inline);
  line-height: 1;
  text-decoration: none;
  white-space: nowrap;
  background-color: theme.get-var(background-color);
  border-radius: theme.get-var(border-radius);

  @include text.typography(
    "base",
    $overrides: (color: theme.get-var(color), font-size: theme.get-var(font-size), line-height: 1)
  );

  &__left,
  &__right {
    display: flex;
    font-size: inherit;
  }

  &--sm {
    @include theme.define-var(
      (
        padding-block: theme.get-spacing("xs"),
        padding-inline: theme.get-spacing("sm"),
        font-size: theme.get-font-size("xs"),
      )
    );
  }

  &--md {
    @include theme.define-var(
      (
        padding-block: theme.get-spacing("xs"),
        padding-inline: theme.get-spacing("sm"),
        font-size: theme.get-font-size("sm"),
      )
    );
  }

  &--lg {
    @include theme.define-var(
      (
        padding-block: theme.get-spacing("sm"),
        padding-inline: theme.get-spacing("md"),
        font-size: theme.get-font-size("sm"),
      )
    );
  }

  @each $key, $value in $tag-skins {
    &--#{$key} {
      @include theme.define-var(
        (
          color: #fff,
          background-color: theme.get-color($value, "500"),
        )
      );

      &[href]:hover {
        @include theme.define-var(
          (
            background-color: theme.get-color($value, "600"),
          )
        );
      }
    }
  }
}
