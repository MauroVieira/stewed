@use "@stewed/react/src/theme/src/styles" as theme;
@use "@stewed/react/src/typography/src/styles" as text;
@use "./variables" as *;

@include theme.scope($button-root) {
  @include theme.define-var(
    (
      border-width: 1px,
      border-color: transparent,
      border-radius: theme.get-radius("sm"),
      gap: theme.get-spacing("sm"),
    )
  );

  position: relative;
  box-sizing: border-box;
  display: inline-flex;
  gap: theme.get-var(gap);
  align-items: center;
  justify-content: center;
  min-height: calc(calc(theme.get-var(padding-block) * 2) + theme.get-var(text-line-height));
  padding-block: calc(theme.get-var(padding-block) - theme.get-var(border-width));
  padding-inline: calc(theme.get-var(padding-inline) - theme.get-var(border-width));
  overflow: hidden;
  color: theme.get-var(color);
  text-overflow: ellipsis;
  white-space: nowrap;
  touch-action: manipulation;
  cursor: pointer;
  user-select: none;
  background-color: theme.get-var(background-color);
  border: theme.get-var(border-width) solid theme.get-var(border-color);
  border-radius: theme.get-var(border-radius);

  @include theme.focus-styles;
  @include theme.disabled-styles;

  &[href] {
    text-decoration: none;
  }

  @each $key, $value in $button-skins {
    &--#{$key} {
      &-filled {
        @include theme.define-var(
          (
            background-color: theme.get-color($value),
            color: #fff,
          )
        );

        &:hover {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "600"),
            )
          );
        }

        &:active {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "700"),
            )
          );
        }
      }

      &-ghost {
        @include theme.define-var(
          (
            color: theme.get-color($value),
            background-color: transparent,
          )
        );

        &:hover {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "50"),
            )
          );
        }

        &:active {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "100"),
            )
          );
        }
      }

      &-outline {
        @include theme.define-var(
          (
            background-color: transparent,
            border-color: currentColor,
            color: theme.get-color($value),
          )
        );

        &:hover {
          @include theme.define-var(
            (
              color: theme.get-color($value, "600"),
            )
          );
        }

        &:active {
          @include theme.define-var(
            (
              color: theme.get-color($value, "700"),
            )
          );
        }
      }
    }
  }

  &__text {
    @include text.typography(
      base,
      $overrides: (
        color: currentColor,
        font-size: theme.get-var(text-font-size),
        line-height: theme.get-var(text-line-height)
      )
    );
  }

  /* stylelint-disable-next-line selector-max-type */
  svg {
    width: theme.get-var(text-line-height);
    height: theme.get-var(text-line-height);
  }

  &__left,
  &__right {
    display: flex;
    font-size: inherit;
  }

  &--icon-only {
    gap: 0;
    width: calc(calc(theme.get-var(padding-block) * 2) + theme.get-var(text-line-height));

    .#{$button-root} {
      &__text {
        @include theme.define-var(
          (
            text-font-size: 0,
          )
        );
      }
    }
  }

  &--xs {
    @include theme.define-var(
      (
        padding-block: theme.get-spacing("xs"),
        padding-inline: theme.get-spacing("xs"),
        text-line-height: theme.get-line-height("xs"),
        text-font-size: theme.get-font-size("xs"),
      )
    );
  }

  &--sm {
    @include theme.define-var(
      (
        padding-block: theme.get-spacing("sm"),
        padding-inline: theme.get-spacing("md"),
        text-line-height: theme.get-line-height("sm"),
        text-font-size: theme.get-font-size("sm"),
      )
    );
  }

  &--md {
    @include theme.define-var(
      (
        padding-block: theme.get-spacing("md"),
        padding-inline: theme.get-spacing("lg"),
        text-line-height: theme.get-line-height("sm"),
        text-font-size: theme.get-font-size("sm"),
      )
    );
  }

  &--lg {
    @include theme.define-var(
      (
        padding-inline: theme.get-spacing("md"),
        padding-block: theme.get-spacing("lg"),
        text-line-height: theme.get-line-height("md"),
        text-font-size: theme.get-font-size("md"),
      )
    );
  }

  &--xl {
    @include theme.define-var(
      (
        padding-inline: theme.get-spacing("lg"),
        padding-block: theme.get-spacing("lg"),
        text-line-height: theme.get-line-height("md"),
        text-font-size: theme.get-font-size("md"),
      )
    );
  }

  &--fullWidth {
    width: 100%;
  }
}
