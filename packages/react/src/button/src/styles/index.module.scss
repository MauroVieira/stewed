@use "sass:map";
@use "@stewed/react/src/theme/src/styles" as theme;
@use "@stewed/react/src/typography/src/styles" as text;
@use "./variables" as *;

@include theme.scope($button-root) {
  all: reset;

  @include theme.define-var(
    (
      border-radius: theme.get-radius("md"),
      gap: theme.get-spacing("md"),
    )
  );

  position: relative;
  box-sizing: border-box;
  display: inline-flex;
  gap: theme.get-var(gap);
  align-items: center;
  justify-content: center;
  min-width: theme.get-var(size);
  height: theme.get-var(size);
  padding: 0 theme.get-var(spacing);
  overflow: hidden;
  color: theme.get-var(color);
  text-overflow: ellipsis;
  white-space: nowrap;
  touch-action: manipulation;
  cursor: pointer;
  user-select: none;
  background-color: theme.get-var(background);
  border: 1px solid theme.get-var(border-color);
  border-radius: theme.get-var(border-radius);

  @include theme.focus-styles;
  @include theme.disabled-styles;

  @each $key, $value in $button-skins {
    &--#{$key} {
      @include theme.define-var(
        (
          color: theme.get-color($value),
          border-color: transparent,
          color-hover: theme.get-color($value, "600"),
          background: theme.get-color($value),
          background-hover: theme.get-color($value, "600"),
          background-active: theme.get-color($value, "700"),
          background-ghost-hover: theme.get-color($value, "50"),
          background-ghost-active: theme.get-color($value, "100"),
        )
      );
    }
  }

  // &--primary {
  //   @include theme.define-var(
  //     (
  //       color: theme.get-theme-var("color-text-inverse"),
  //       background: theme.get-theme-var("color-primary"),
  //     )
  //   );
  // }

  &--filled {
    @include theme.define-var(
      (
        color: #fff,
      )
    );

    &:hover {
      @include theme.define-var(
        (
          background: theme.get-var(background-hover),
        )
      );
    }

    &:active {
      @include theme.define-var(
        (
          background: theme.get-var(background-active),
        )
      );
    }
  }

  &--ghost {
    @include theme.define-var(
      (
        background: transparent,
      )
    );

    &:hover {
      @include theme.define-var(
        (
          background: theme.get-var(background-ghost-hover),
        )
      );
    }

    &:active {
      @include theme.define-var(
        (
          background: theme.get-var(background-ghost-active),
        )
      );
    }
  }

  &--outline {
    @include theme.define-var(
      (
        background: transparent,
        border-color: currentColor,
      )
    );

    &:hover {
      @include theme.define-var(
        (
          color: theme.get-var(color-hover),
        )
      );
    }

    &:active {
      @include theme.define-var(
        (
          color: theme.get-var(color-active),
        )
      );
    }
  }

  &__text {
    @include text.typography(base, $overrides: (color: currentColor, font-size: null));
  }

  &__left,
  &__right {
    display: flex;
    font-size: inherit;
  }

  &--icon-only {
    gap: 0;
    width: theme.get-var(size);

    .#{$button-root} {
      &__text {
        font-size: 0;
      }
    }
  }

  &--sm {
    @include theme.define-var(
      (
        size: map.get($button-sizes, "sm"),
        spacing: map.get($button-spacings, "sm"),
        font-size: map.get($button-font-sizes, "xs"),
      )
    );
  }

  &--md {
    @include theme.define-var(
      (
        size: map.get($button-sizes, "md"),
        spacing: map.get($button-spacings, "md"),
        font-size: map.get($button-font-sizes, "sm"),
      )
    );
  }

  &--lg {
    @include theme.define-var(
      (
        size: map.get($button-sizes, "lg"),
        spacing: map.get($button-spacings, "lg"),
        font-size: map.get($button-font-sizes, "md"),
      )
    );
  }

  &--fullWidth {
    width: 100%;
  }
}
