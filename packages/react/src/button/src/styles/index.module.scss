@use "sass:map";
@use "@stewed/react/src/theme" as theme;
@use "@stewed/react/src/typography/src/styles" as text;
@use "./variables" as *;

@include theme.scope($button-root) {
  @include theme.reset;

  position: relative;
  box-sizing: border-box;
  display: inline-flex;
  gap: $button-gap;
  align-items: center;
  justify-content: center;
  min-width: theme.get-var(button-size);
  height: theme.get-var(button-size);
  padding: 0 theme.get-var(button-spacing);
  overflow: hidden;
  color: theme.get-var(button-color);
  text-overflow: ellipsis;
  white-space: nowrap;
  touch-action: manipulation;
  cursor: pointer;
  user-select: none;
  background-color: theme.get-var(button-background);
  border: 1px solid theme.get-var(button-border-color);
  border-radius: map.get($button-border-radius, "square");

  @include theme.focus-styles;
  @include theme.disabled-styles;

  @each $key, $value in $button-skins {
    &--#{$key} {
      @include theme.define-var(
        (
          button-color: theme.get-color($value),
          border-color: transparent,
          button-color-hover: theme.get-color($value, "600"),
          button-background: theme.get-color($value),
          button-background-hover: theme.get-color($value, "600"),
          button-background-active: theme.get-color($value, "700"),
          button-background-ghost-hover: theme.get-color($value, "50"),
          button-background-ghost-active: theme.get-color($value, "100"),
        )
      );
    }
  }

  &--filled {
    @include theme.define-var(
      (
        button-color: #fff,
      )
    );

    &:hover {
      @include theme.define-var(
        (
          button-background: theme.get-var(button-background-hover),
        )
      );
    }

    &:active {
      @include theme.define-var(
        (
          button-background: theme.get-var(button-background-active),
        )
      );
    }
  }

  &--ghost {
    @include theme.define-var(
      (
        button-background: transparent,
      )
    );

    &:hover {
      @include theme.define-var(
        (
          button-background: theme.get-var(button-background-ghost-hover),
        )
      );
    }

    &:active {
      @include theme.define-var(
        (
          button-background: theme.get-var(button-background-ghost-active),
        )
      );
    }
  }

  &--outline {
    @include theme.define-var(
      (
        button-background: transparent,
        button-border-color: currentColor,
      )
    );

    &:hover {
      @include theme.define-var(
        (
          button-color: theme.get-var(button-color-hover),
        )
      );
    }

    &:active {
      @include theme.define-var(
        (
          button-color: theme.get-var(button-color-active),
        )
      );
    }
  }

  &__text {
    @include text.typography(
      base,
      $overrides: (
        --typography-color: theme.get-var(button-color),
        --typography-font-size: theme.get-var(button-font-size)
      )
    );
  }

  &__left,
  &__right {
    display: flex;
    font-size: inherit;
  }

  &--icon-only {
    gap: 0;
    width: theme.get-var(button-size);

    #{$button-root} {
      &__text {
        font-size: 0;
      }
    }
  }

  &--sm {
    @include theme.define-var(
      (
        button-size: map.get($button-sizes, "sm"),
        button-spacing: map.get($button-spacings, "sm"),
        button-font-size: map.get($button-font-sizes, "xs"),
      )
    );
  }

  &--md {
    --button-size: #{map.get($button-sizes, "md")};
    --button-spacing: #{map.get($button-spacings, "lg")};
    --button-font-size: #{map.get($button-font-sizes, "sm")};
  }

  &--lg {
    --button-size: #{map.get($button-sizes, "lg")};
    --button-spacing: #{map.get($button-spacings, "xl")};
    --button-font-size: #{map.get($button-font-sizes, "md")};
  }

  &--fullWidth {
    width: 100%;
  }
}
