@use "sass:map";
@use "@stewed/react/src/theme/src/styles" as theme;
@use "@stewed/react/src/typography/src/styles" as text;
@use "./variables" as *;

@include theme.scope($button-root) {
  @include theme.define-var(
    (
      border-radius: theme.get-radius("full"),
      gap: theme.get-spacing("md"),
    )
  );

  position: relative;
  box-sizing: border-box;
  display: inline-flex;
  gap: theme.get-var(gap);
  align-items: center;
  justify-content: center;
  min-width: theme.get-var(size);
  height: theme.get-var(size);
  padding: 0 theme.get-var(spacing);
  overflow: hidden;
  color: theme.get-var(color);
  text-overflow: ellipsis;
  white-space: nowrap;
  touch-action: manipulation;
  cursor: pointer;
  user-select: none;
  background-color: theme.get-var(background-color);
  border: 1px solid theme.get-var(border-color);
  border-radius: theme.get-var(border-radius);

  @include theme.focus-styles;
  @include theme.disabled-styles;

  &[href] {
    text-decoration: none;
  }

  @each $key, $value in $button-skins {
    &--#{$key} {
      &-filled {
        @include theme.define-var(
          (
            background-color: theme.get-color($value),
            border-color: theme.get-color($value),
            color: #fff,
          )
        );

        &:hover {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "600"),
              border-color: theme.get-color($value, "600"),
            )
          );
        }

        &:active {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "700"),
              border-color: theme.get-color($value, "700"),
            )
          );
        }
      }

      &-ghost {
        @include theme.define-var(
          (
            color: theme.get-color($value),
            background-color: transparent,
            border-color: transparent,
          )
        );

        &:hover {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "50"),
            )
          );
        }

        &:active {
          @include theme.define-var(
            (
              background-color: theme.get-color($value, "100"),
            )
          );
        }
      }

      &-outline {
        @include theme.define-var(
          (
            background-color: transparent,
            border-color: currentColor,
            color: theme.get-color($value),
          )
        );

        &:hover {
          @include theme.define-var(
            (
              color: theme.get-color($value, "600"),
            )
          );
        }

        &:active {
          @include theme.define-var(
            (
              color: theme.get-color($value, "700"),
            )
          );
        }
      }
    }
  }

  &__text {
    @include text.typography(
      base,
      $overrides: (color: currentColor, font-size: theme.get-font-size("sm"))
    );
  }

  &__left,
  &__right {
    display: flex;
    font-size: inherit;
  }

  &--icon-only {
    gap: 0;
    width: theme.get-var(size);
    padding: 0;

    .#{$button-root} {
      &__text {
        font-size: 0;
      }
    }
  }

  &--sm {
    @include theme.define-var(
      (
        size: theme.get-spacing("4xl"),
        spacing: theme.get-spacing("xl"),
        font-size: theme.get-font-size("sm"),
      )
    );
  }

  &--md {
    @include theme.define-var(
      (
        size: theme.get-spacing("6xl"),
        spacing: theme.get-spacing("xl"),
        font-size: theme.get-font-size("sm"),
      )
    );
  }

  &--lg {
    @include theme.define-var(
      (
        size: theme.get-font-size("5xl"),
        spacing: theme.get-spacing("2xl"),
        font-size: theme.get-font-size("md"),
      )
    );
  }

  &--fullWidth {
    width: 100%;
  }
}
